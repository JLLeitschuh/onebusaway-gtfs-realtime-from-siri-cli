onebusaway-gtfs-realtime-from-siri-cli

  The <<<onebusaway-gtfs-realtime-from-siri-cli>>> application is designed to convert data in the
{{{http://www.siri.org.uk/}SIRI}} format into the {{{https://developers.google.com/transit/gtfs-realtime/}GTFS-realtime}} format.
Both standards describe methods for exchanging real-time public transit information in a machine-readable way.  SIRI is
often used by transit agencies for exchanging operations-oriented data with internal systems, while GTFS-realtime is
designed for exchanging rider-oriented data with external developers.

  Specifically, the application subscribes to a SIRI endpoint, listens for Vehicle Monitoring and Situation Exchange
messages, and produces GTFS-realtime trip update, vehicle position, and alerts feed data.  Both SIRI 1.0 and 1.3 are
supported for input.  GTFS-realtime Feed information is written to file, where it can be hosted using your existing web infrastructure.

* Getting The Application

#set( $url = 'http://nexus.onebusaway.org/service/local/artifact/maven/content?r=public&g=org.onebusaway&a=onebusaway-gtfs-realtime-from-siri-cli&v=' + ${currentVersion} )
#set( $rpm = 'http://nexus.onebusaway.org/service/local/artifact/maven/content?r=public&g=org.onebusaway&a=onebusaway-gtfs-realtime-from-siri-cli&c=rpm&p=zip&v=' + ${currentVersion} )

  * Download the jar: {{{${url}}onebusaway-gtfs-realtime-from-siri-cli.jar}}

  * Download the RPM: {{{${rpm}}onebusaway-gtfs-realtime-from-siri-cli RPM}}
  
  []
  
  Be sure to check out the {{{./rpm.html}full documentation}} for RPM and Linux service. 
  
* Usage

  To run the application:
  
+---+
java -jar onebusaway-gtfs-realtime-from-siri-cli.jar [-args] request [request ...]
+---+

* Args
  
  * <<<--id=value>>> - the client's SIRI participant id
  
  * <<<--clientUrl=url>>> - the url your SIRI client publishes to a server in publish/subscribe
  
  * <<<--privateClientUrl=url>>> - the internal url your SIRI client will actually bind to, if specified (default=clientUrl)
  
  * <<<--tripUpdatesPath=path>>> - write GTFS-realtime TripUpdates to the specified path
  
  * <<<--tripUpdatesUrl=url>>> - share GTFS-realtime TripUpdates at the specified url
  
  * <<<--vehiclePositionsPath=path>>> - write GTFS-realtime VehiclePositions to the specified path
  
  * <<<--vehiclePositionsUrl=url>>> - share GTFS-realtime VehiclePositions at the specified url
  
  * <<<--updateFrequency time>>> - how often to update the GTFS-realtime output files, in seconds (default=10s)
  
  * <<<--staleDataThreshold time>>> - how long before a SIRI vehicle update is considered stale, in seconds (default=5m)
  
  * <<<--producerPriorities=...>>> - priorities when merging data for same vehicle from multiple siri endpoints (pA=1,pB=2,...)
  
* Exporting GTFS-realtime

  We currently support two methods for exporting GTFS-realtime data:
  
  * write the feed to a file
  
  * share the feed through an embedded web-server
  
  []
  
  For example, to write trip updates to a Protocol Buffer encoded output file, you might specify the following command
  line option:
  
+---+
--tripUpdatesPath=/var/www/trip-updates
+---+

  This might be a good option if you have an existing web server.  By writing the GTFS-realtime feed to a file, you can
  let your web server do the work of sharing the file with external clients.
  
  Of course, if you don't have a web server, you can let the application host the feed directly.  Consider the following
  example:
  
+---+
--tripUpdatesUrl=http://localhost:8080/trip-updates
+---+  

  This will share the Protocol Buffer encoded data feed at the url {{{http://localhost:8080/trip-updates}}}.  You can
  even see a text-encoded debug version of the feed by appending "?debug" to the url.
  
* Request Examples

  Requests control the connections that are made to remote SIRI data sources.  At a minimum, it includes a url and a
SIRI module type.  However, other options are available as well.  Here is a simple example to get you started:
 
+---+
Url=http://host:port/path,ModuleType=VEHICLE_MONITORING
+---+
  
  For more info on SIRI requests, see
{{{http://developer.onebusaway.org/modules/onebusaway-siri/${onebusaway_siri_version}/cli-request-spec.html}the full documentation}}.

* Complete Example

  Here's a complete example that shares trip updates and vehicle positions over HTTP and connects to a remote SIRI
  endpoint to pull Vehicle Monitoring records.  It also sends Check-Status requests to the SIRI endpoing every 60
  seconds, will attempt an infinite number of reconnection attempts if the SIRI connection is lost.
  
+---+
java -jar onebusaway-gtfs-realtime-from-siri-cli.jar \
 --tripUpdatesUrl=http://localhost:8080/trip-updates \
 --vehiclePositionsUrl=http://localhost:8080/vehicle-positions \
 Url=http://siri-server:8080/server.xml,ModuleType=VEHICLE_MONITORING,CheckStatusInterval=60,ReconnectionAttempts=-1
+---+

